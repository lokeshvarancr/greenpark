// import React, { useState, useEffect, useMemo, useCallback } from 'react';
// import { LineChart, Line, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';

// // Types
// interface Student {
//   id: string;
//   name: string;
//   institution: string;
//   batch: string;
//   class: string;
//   scores: {
//     [testType: string]: {
//       [subject: string]: number;
//     };
//   };
// }

// interface CustomTooltipProps {
//   active?: boolean;
//   payload?: any[];
//   label?: string;
//   dataKey?: string;
// }

// // Inline SVG for Question Circle icon
// const QuestionCircleIcon: React.FC<{ title: string }> = ({ title }) => (
//     <svg
//         xmlns="http://www.w3.org/2000/svg"
//         viewBox="0 0 24 24"
//         fill="currentColor"
//         className="w-4 h-4 ml-2 text-gray-500"
//         title={title}
//     >
//         <path
//             fillRule="evenodd"
//             d="M2.25 12c0-5.385 4.365-9.75 9.75-9.75s9.75 4.365 9.75 9.75-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12Zm11.02-3.03a.75.75 0 0 0-1.06 0l-1.094 1.093l-.848-.848a.75.75 0 1 0-1.06 1.06l1.5 1.5c.293.293.768.293 1.06 0l1.5-1.5a.75.75 0 0 0 0-1.06ZM8.77 17.5a.75.75 0 0 1-.75-.75v-2.25a.75.75 0 0 1 1.5 0v2.25a.75.75 0 0 1-.75.75Z"
//             clipRule="evenodd"
//         />
//     </svg>
// );


// // Helper function to generate random data
// const generateDummyData = (): Student[] => {
//     const institutions = ['Global Academy', 'Elite Institute'];
//     const batches = {
//         'Global Academy': ['2024-2025', '2023-2024'],
//         'Elite Institute': ['2024-2025', '2023-2024']
//     };
//     const classes = ['11A', '12B', '12C'];
//     const subjects = ['Physics', 'Chemistry', 'Botany', 'Zoology', 'Maths'];
//     const testTypes = ['Weekly', 'Quarterly', 'Grand'];
//     const studentsPerClass = 35;
//     const allStudentsData = [];
//     let studentIdCounter = 1;

//     institutions.forEach(inst => {
//         batches[inst].forEach(batch => {
//             classes.forEach(cls => {
//                 for (let i = 0; i < studentsPerClass; i++) {
//                     const studentName = `Student ${studentIdCounter++}`;
//                     const studentData = {
//                         id: `S${studentIdCounter - 1}`,
//                         name: studentName,
//                         institution: inst,
//                         batch: batch,
//                         class: cls,
//                         scores: {}
//                     };

//                     testTypes.forEach(testType => {
//                         studentData.scores[testType] = {};
//                         let baseScore = Math.floor(Math.random() * 300) + 300; // Start with a decent base score (300-600)
//                         if (testType === 'Weekly') {
//                             baseScore = Math.floor(Math.random() * 400) + 300; // Weekly scores generally higher (300-700)
//                         } else if (testType === 'Quarterly') {
//                             baseScore = Math.floor(Math.random() * 350) + 250; // Quarterly scores might dip slightly (250-600)
//                         } else if (testType === 'Grand') {
//                             baseScore = Math.floor(Math.random() * 400) + 200; // Grand scores can have wider range (200-600)
//                         }

//                         subjects.forEach(subject => {
//                             let subjectScore = baseScore + Math.floor(Math.random() * 100) - 50; // Add variation
//                             // Ensure scores are within 0-720
//                             subjectScore = Math.max(0, Math.min(720, subjectScore));
//                             studentData.scores[testType][subject] = subjectScore;
//                         });
//                     });
//                     allStudentsData.push(studentData);
//                 }
//             });
//         });
//     });
//     return allStudentsData;
// };

// const allStudents = generateDummyData();

// // Risk Bands calculation
// const getRiskBand = (score: number) => {
//     if (score < 300) return 'High Risk';
//     if (score <= 450) return 'Medium Risk';
//     return 'Low Risk';
// };

// // Custom Tooltip component for Recharts
// const CustomTooltip: React.FC<CustomTooltipProps> = ({ active, payload, label, dataKey }) => {
//     if (active && payload && payload.length) {
//         return (
//             <div className="p-2 bg-gray-800 text-white rounded-md shadow-lg border border-gray-700 text-sm">
//                 <p className="font-bold mb-1">{label}</p>
//                 {payload.map((entry, index) => (
//                     <p key={`item-${index}`} style={{ color: entry.color }}>
//                         {`${entry.name}: ${typeof entry.value === 'number' ? entry.value.toFixed(2) : entry.value}${entry.unit || ''}`}
//                     </p>
//                 ))}
//                 {payload[0]?.payload?.studentCount && <p>Student Count: {payload[0].payload.studentCount}</p>}
//                 {payload[0]?.payload?.retentionPercentage && <p>Retention %: {payload[0].payload.retentionPercentage.toFixed(2)}%</p>}
//                 {payload[0]?.payload?.weeklyAvgScore && <p>Weekly Avg: {payload[0].payload.weeklyAvgScore.toFixed(2)}</p>}
//                 {payload[0]?.payload?.quarterlyAvgScore && <p>Quarterly Avg: {payload[0].payload.quarterlyAvgScore.toFixed(2)}</p>}
//                 {payload[0]?.payload?.grandAvgScore && <p>Grand Avg: {payload[0].payload.grandAvgScore.toFixed(2)}</p>}
//             </div>
//         );
//     }
//     return null;
// };

// function App() {
//     const [selectedInstitution, setSelectedInstitution] = useState<string>('');
//     const [selectedBatch, setSelectedBatch] = useState<string>('');
//     const [selectedClass, setSelectedClass] = useState<string>('');
//     const [scoreRange, setScoreRange] = useState<[number, number]>([0, 720]);
//     const [selectedTestType, setSelectedTestType] = useState<string>(''); // For drill-down

//     // Memoize options for filters
//     const institutionOptions = useMemo(() => {
//         const uniqueInstitutions = [...new Set(allStudents.map(s => s.institution))];
//         return ['', ...uniqueInstitutions];
//     }, []);

//     const batchOptions = useMemo(() => {
//         if (!selectedInstitution) return [''];
//         const batchesForInstitution = allStudents
//             .filter(s => s.institution === selectedInstitution)
//             .map(s => s.batch);
//         return ['', ...new Set(batchesForInstitution)];
//     }, [selectedInstitution]);

//     const classOptions = useMemo(() => {
//         if (!selectedBatch) return [''];
//         const classesForBatch = allStudents
//             .filter(s => s.institution === selectedInstitution && s.batch === selectedBatch)
//             .map(s => s.class);
//         return ['', ...new Set(classesForBatch)];
//     }, [selectedInstitution, selectedBatch]);

//     // Filtered data based on selections
//     const filteredStudents = useMemo(() => {
//         let filtered = allStudents;

//         if (selectedInstitution) {
//             filtered = filtered.filter(s => s.institution === selectedInstitution);
//         }
//         if (selectedBatch) {
//             filtered = filtered.filter(s => s.batch === selectedBatch);
//         }
//         if (selectedClass) {
//             filtered = filtered.filter(s => s.class === selectedClass);
//         }

//         // Apply score range filter across all relevant tests (Weekly, Quarterly, Grand)
//         // A student is included if ANY of their test's average scores fall within the range.
//         filtered = filtered.filter(student => {
//             const weeklyAvg = Object.values(student.scores.Weekly).reduce((a, b) => a + b, 0) / Object.values(student.scores.Weekly).length;
//             const quarterlyAvg = Object.values(student.scores.Quarterly).reduce((a, b) => a + b, 0) / Object.values(student.scores.Quarterly).length;
//             const grandAvg = Object.values(student.scores.Grand).reduce((a, b) => a + b, 0) / Object.values(student.scores.Grand).length;

//             return (
//                 (weeklyAvg >= scoreRange[0] && weeklyAvg <= scoreRange[1]) ||
//                 (quarterlyAvg >= scoreRange[0] && quarterlyAvg <= scoreRange[1]) ||
//                 (grandAvg >= scoreRange[0] && grandAvg <= scoreRange[1])
//             );
//         });

//         return filtered;
//     }, [selectedInstitution, selectedBatch, selectedClass, scoreRange]);


//     // --- Data Preparation for Charts ---

//     // 1. Test-Type Performance Drift Data
//     const testTypePerformanceData = useMemo(() => {
//         if (filteredStudents.length === 0) return [];

//         const testTypes = ['Weekly', 'Quarterly', 'Grand'];
//         const data = [];

//         if (selectedClass) {
//             // Student-level data is not aggregated for line chart,
//             // instead, show class-level averages for the selected class.
//             const classStudents = filteredStudents.filter(s => s.class === selectedClass);
//             testTypes.forEach(testType => {
//                 const totalScore = classStudents.reduce((sum, student) => {
//                     const studentAvg = Object.values(student.scores[testType]).reduce((s, score) => s + score, 0) / Object.values(student.scores[testType]).length;
//                     return sum + studentAvg;
//                 }, 0);
//                 const avgScore = classStudents.length > 0 ? totalScore / classStudents.length : 0;
//                 data.push({
//                     name: testType,
//                     [`${selectedClass} Avg Score`]: avgScore,
//                     studentCount: classStudents.length
//                 });
//             });
//         } else {
//             // Show class-level summaries or overall average
//             const classesInView = [...new Set(filteredStudents.map(s => s.class))];
//             testTypes.forEach(testType => {
//                 const entry = { name: testType };
//                 let totalStudentsAcrossClasses = 0;
//                 classesInView.forEach(cls => {
//                     const studentsInClass = filteredStudents.filter(s => s.class === cls);
//                     totalStudentsAcrossClasses += studentsInClass.length;
//                     const classAvgScore = studentsInClass.reduce((sum, student) => {
//                         const studentAvg = Object.values(student.scores[testType]).reduce((s, score) => s + score, 0) / Object.values(student.scores[testType]).length;
//                         return sum + studentAvg;
//                     }, 0) / (studentsInClass.length || 1);
//                     entry[`${cls} Avg Score`] = classAvgScore;
//                 });
//                 entry.studentCount = totalStudentsAcrossClasses;
//                 data.push(entry);
//             });
//         }
//         return data;
//     }, [filteredStudents, selectedClass]);


//     // 2. Retention Strength % Data
//     const retentionStrengthData = useMemo(() => {
//         if (filteredStudents.length === 0) return [];

//         let totalStudentsConsidered = 0;
//         let studentsRetainedOrImproved = 0;

//         filteredStudents.forEach(student => {
//             const weeklyAvg = Object.values(student.scores.Weekly).reduce((a, b) => a + b, 0) / Object.values(student.scores.Weekly).length;
//             const quarterlyAvg = Object.values(student.scores.Quarterly).reduce((a, b) => a + b, 0) / Object.values(student.scores.Quarterly).length;
//             const grandAvg = Object.values(student.scores.Grand).reduce((a, b) => a + b, 0) / Object.values(student.scores.Grand).length;

//             totalStudentsConsidered++;
//             if (grandAvg >= weeklyAvg) { // Check improvement/maintenance from Weekly to Grand
//                 studentsRetainedOrImproved++;
//             }
//         });

//         const retentionPercentage = totalStudentsConsidered > 0 ? (studentsRetainedOrImproved / totalStudentsConsidered) * 100 : 0;

//         return [
//             { name: 'Retained/Improved', value: retentionPercentage, studentCount: studentsRetainedOrImproved, retentionPercentage: retentionPercentage },
//             { name: 'Dropped', value: 100 - retentionPercentage, studentCount: totalStudentsConsidered - studentsRetainedOrImproved, retentionPercentage: 100 - retentionPercentage }
//         ];
//     }, [filteredStudents]);

//     const retentionColors = ['#4CAF50', '#F44336']; // Green for retained/improved, Red for dropped


//     // 3. Subject Stress Amplifier Data
//     const subjectStressData = useMemo(() => {
//         if (filteredStudents.length === 0) return [];

//         const subjects = ['Physics', 'Chemistry', 'Botany', 'Zoology', 'Maths'];
//         const data = subjects.map(subject => {
//             let totalWeeklyScore = 0;
//             let totalQuarterlyScore = 0; // Added for Quarterly
//             let totalGrandScore = 0;
//             let studentCount = 0;

//             filteredStudents.forEach(student => {
//                 if (student.scores.Weekly[subject] !== undefined &&
//                     student.scores.Quarterly[subject] !== undefined && // Check for Quarterly
//                     student.scores.Grand[subject] !== undefined) {
//                     totalWeeklyScore += student.scores.Weekly[subject];
//                     totalQuarterlyScore += student.scores.Quarterly[subject]; // Added for Quarterly
//                     totalGrandScore += student.scores.Grand[subject];
//                     studentCount++;
//                 }
//             });

//             const weeklyAvg = studentCount > 0 ? totalWeeklyScore / studentCount : 0;
//             const quarterlyAvg = studentCount > 0 ? totalQuarterlyScore / studentCount : 0; // Added for Quarterly
//             const grandAvg = studentCount > 0 ? totalGrandScore / studentCount : 0;

//             return {
//                 subject: subject,
//                 'Weekly Avg Score': weeklyAvg,
//                 'Quarterly Avg Score': quarterlyAvg, // Added for Quarterly
//                 'Grand Avg Score': grandAvg,
//                 studentCount: studentCount,
//                 weeklyAvgScore: weeklyAvg, // For tooltip
//                 quarterlyAvgScore: quarterlyAvg, // For tooltip
//                 grandAvgScore: grandAvg // For tooltip
//             };
//         });

//         return data;
//     }, [filteredStudents]);


//     // Handle test type click for drill down (optional: filter dashboard)
//     const handleTestTypeClick = useCallback((testType) => {
//         setSelectedTestType(selectedTestType === testType ? '' : testType); // Toggle selection
//     }, [selectedTestType]);

//     const chartColors = {
//         line1: '#3B82F6', // Blue
//         line2: '#EC4899', // Pink
//         line3: '#10B981', // Green
//         bar1: '#F59E0B', // Amber
//         bar2: '#8B5CF6', // Violet
//         bar3: '#14B8A6', // Teal for Quarterly
//         pie1: '#4CAF50', // Green
//         pie2: '#F44336', // Red
//     };

//     // Filtered data based on selections
//     const filteredStudents = useMemo(() => {
//         let filtered = allStudents;

//         if (selectedInstitution) {
//             filtered = filtered.filter(s => s.institution === selectedInstitution);
//         }
//         if (selectedBatch) {
//             filtered = filtered.filter(s => s.batch === selectedBatch);
//         }
//         if (selectedClass) {
//             filtered = filtered.filter(s => s.class === selectedClass);
//         }

//         // Apply score range filter across all relevant tests (Weekly, Quarterly, Grand)
//         // A student is included if ANY of their test's average scores fall within the range.
//         filtered = filtered.filter(student => {
//             const weeklyAvg = Object.values(student.scores.Weekly).reduce((a, b) => a + b, 0) / Object.values(student.scores.Weekly).length;
//             const quarterlyAvg = Object.values(student.scores.Quarterly).reduce((a, b) => a + b, 0) / Object.values(student.scores.Quarterly).length;
//             const grandAvg = Object.values(student.scores.Grand).reduce((a, b) => a + b, 0) / Object.values(student.scores.Grand).length;

//             return (
//                 (weeklyAvg >= scoreRange[0] && weeklyAvg <= scoreRange[1]) ||
//                 (quarterlyAvg >= scoreRange[0] && quarterlyAvg <= scoreRange[1]) ||
//                 (grandAvg >= scoreRange[0] && grandAvg <= scoreRange[1])
//             );
//         });

//         return filtered;
//     }, [selectedInstitution, selectedBatch, selectedClass, scoreRange]);

//     return (
//         <div className="min-h-screen bg-gray-900 text-gray-100 p-6 font-inter">
//             <style>
//                 {`
//                 @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
//                 .font-inter {
//                     font-family: 'Inter', sans-serif;
//                 }
//                 .recharts-default-tooltip {
//                     background-color: #1F2937 !important; /* Darker background for tooltip */
//                     border: 1px solid #374151 !important;
//                     border-radius: 0.375rem !important;
//                 }
//                 .recharts-surface {
//                     cursor: pointer; /* Indicate clickable charts */
//                 }
//                 `}
//             </style>
//             <h1 className="text-4xl font-bold text-center mb-8 text-blue-400">Momentum Overview Dashboard</h1>

//             {/* Filters Section */}
//             <div className="bg-gray-800 p-6 rounded-lg shadow-xl mb-8 flex flex-wrap gap-6 items-center justify-center">
//                 <div className="flex flex-col">
//                     <label htmlFor="institution" className="text-sm font-medium text-gray-300 mb-1">Institution</label>
//                     <select
//                         id="institution"
//                         className="p-2 border border-gray-600 rounded-md bg-gray-700 text-gray-200 focus:ring-blue-500 focus:border-blue-500"
//                         value={selectedInstitution}
//                         onChange={(e) => {
//                             setSelectedInstitution(e.target.value);
//                             setSelectedBatch('');
//                             setSelectedClass('');
//                         }}
//                     >
//                         {institutionOptions.map(option => (
//                             <option key={option} value={option}>{option || 'All Institutions'}</option>
//                         ))}
//                     </select>
//                 </div>

//                 <div className="flex flex-col">
//                     <label htmlFor="batch" className="text-sm font-medium text-gray-300 mb-1">Batch</label>
//                     <select
//                         id="batch"
//                         className="p-2 border border-gray-600 rounded-md bg-gray-700 text-gray-200 focus:ring-blue-500 focus:border-blue-500"
//                         value={selectedBatch}
//                         onChange={(e) => {
//                             setSelectedBatch(e.target.value);
//                             setSelectedClass('');
//                         }}
//                         disabled={!selectedInstitution}
//                     >
//                         {batchOptions.map(option => (
//                             <option key={option} value={option}>{option || 'All Batches'}</option>
//                         ))}
//                     </select>
//                 </div>

//                 <div className="flex flex-col">
//                     <label htmlFor="class" className="text-sm font-medium text-gray-300 mb-1">Class</label>
//                     <select
//                         id="class"
//                         className="p-2 border border-gray-600 rounded-md bg-gray-700 text-gray-200 focus:ring-blue-500 focus:border-blue-500"
//                         value={selectedClass}
//                         onChange={(e) => setSelectedClass(e.target.value)}
//                         disabled={!selectedBatch}
//                     >
//                         {classOptions.map(option => (
//                             <option key={option} value={option}>{option || 'All Classes'}</option>
//                         ))}
//                     </select>
//                 </div>

//                 <div className="flex flex-col w-48">
//                     <label htmlFor="scoreRange" className="text-sm font-medium text-gray-300 mb-1">Score Range: {scoreRange[0]} - {scoreRange[1]}</label>
//                     <input
//                         type="range"
//                         min="0"
//                         max="720"
//                         step="10"
//                         value={scoreRange[0]}
//                         onChange={(e) => setScoreRange([Number(e.target.value), scoreRange[1]])}
//                         className="w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer range-sm accent-blue-500"
//                     />
//                     <input
//                         type="range"
//                         min="0"
//                         max="720"
//                         step="10"
//                         value={scoreRange[1]}
//                         onChange={(e) => setScoreRange([scoreRange[0], Number(e.target.value)])}
//                         className="w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer range-sm accent-blue-500 mt-1"
//                     />
//                 </div>
//             </div>

//             {filteredStudents.length === 0 && (
//                 <div className="text-center text-gray-400 text-lg py-10">
//                     No data available for the selected filters. Please adjust your selections.
//                 </div>
//             )}

//             {/* Dashboard Sections */}
//             <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
//                 {/* Test-Type Performance Drift */}
//                 <div className="bg-gray-800 p-6 rounded-lg shadow-xl col-span-1 lg:col-span-2">
//                     <h2 className="text-xl font-semibold mb-4 text-blue-300 flex items-center">
//                         Test-Type Performance Drift <QuestionCircleIcon title="Shows how average scores are changing across test types. One line per class or overall average based on selection." />
//                     </h2>
//                     <ResponsiveContainer width="100%" height={300}>
//                         <LineChart data={testTypePerformanceData} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>
//                             <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
//                             <XAxis dataKey="name" stroke="#9CA3AF" />
//                             <YAxis domain={[0, 720]} stroke="#9CA3AF" />
//                             <Tooltip content={<CustomTooltip />} />
//                             <Legend />
//                             {Object.keys(testTypePerformanceData[0] || {})
//                                 .filter(key => key.includes('Avg Score'))
//                                 .map((key, index) => (
//                                     <Line
//                                         key={key}
//                                         type="monotone"
//                                         dataKey={key}
//                                         stroke={index === 0 ? chartColors.line1 : (index === 1 ? chartColors.line2 : chartColors.line3)}
//                                         strokeWidth={2}
//                                         dot={{ stroke: '#fff', strokeWidth: 2, r: 4 }}
//                                         activeDot={{ r: 6 }}
//                                     />
//                                 ))}
//                         </LineChart>
//                     </ResponsiveContainer>
//                 </div>

//                 {/* Side-by-Side Charts (Retention Strength only now) */}
//                 <div className="col-span-1 lg:col-span-2 flex justify-center"> {/* Centered for single chart row */}
//                     {/* Retention Strength % */}
//                     <div className="bg-gray-800 p-6 rounded-lg shadow-xl w-full md:w-1/2 lg:w-1/3"> {/* Adjust width as needed */}
//                         <h2 className="text-xl font-semibold mb-4 text-purple-300 flex items-center">
//                             Retention Strength % <QuestionCircleIcon title="Percentage of students who maintained or improved scores from Weekly to Grand tests." />
//                         </h2>
//                         <ResponsiveContainer width="100%" height={250}>
//                             <PieChart>
//                                 <Pie
//                                     data={retentionStrengthData}
//                                     cx="50%"
//                                     cy="50%"
//                                     innerRadius={60}
//                                     outerRadius={90}
//                                     fill="#8884d8"
//                                     paddingAngle={5}
//                                     dataKey="value"
//                                     isAnimationActive={true}
//                                 >
//                                     {retentionStrengthData.map((entry, index) => (
//                                         <Cell key={`cell-${index}`} fill={retentionColors[index % retentionColors.length]} />
//                                     ))}
//                                 </Pie>
//                                 <Tooltip content={<CustomTooltip />} />
//                                 <Legend />
//                             </PieChart>
//                         </ResponsiveContainer>
//                     </div>
//                 </div>

//                 {/* Subject Stress Amplifier */}
//                 <div className="bg-gray-800 p-6 rounded-lg shadow-xl col-span-1 lg:col-span-2">
//                     <h2 className="text-xl font-semibold mb-4 text-yellow-300 flex items-center">
//                         Subject Stress Amplifier <QuestionCircleIcon title="Compares average subject score drops from Weekly to Grand tests, including Quarterly." />
//                     </h2>
//                     <ResponsiveContainer width="100%" height={300}>
//                         <BarChart data={subjectStressData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>
//                             <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
//                             <XAxis dataKey="subject" stroke="#9CA3AF" />
//                             <YAxis domain={[0, 720]} stroke="#9CA3AF" />
//                             <Tooltip content={<CustomTooltip />} />
//                             <Legend />
//                             <Bar dataKey="Weekly Avg Score" fill={chartColors.bar1} radius={[10, 10, 0, 0]} />
//                             <Bar dataKey="Quarterly Avg Score" fill={chartColors.bar3} radius={[10, 10, 0, 0]} /> {/* New Bar for Quarterly */}
//                             <Bar dataKey="Grand Avg Score" fill={chartColors.bar2} radius={[10, 10, 0, 0]} />
//                         </BarChart>
//                     </ResponsiveContainer>
//                 </div>
//             </div>
//         </div>
//     );
// }

// export default App;
